from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import add_user, get_products, add_to_cart, get_user_cart, remove_from_cart, get_product

user_router = Router()


@user_router.message(CommandStart())
async def start_command(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    
    –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç session –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä!
    –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è middleware.
    """
    await add_user(session, message.from_user.id, message.from_user.username)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω.\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /shop\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cart"
    )


@user_router.message(Command("shop"))
async def show_shop(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫.
    """
    products = await get_products(session)
    if not products:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    for product in products:
        # –¢–µ–ø–µ—Ä—å product - —ç—Ç–æ –æ–±—ä–µ–∫—Ç SQLAlchemy, –∞ –Ω–µ –∫–æ—Ä—Ç–µ–∂!
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product.id}")]
            ]
        )
        caption = f"<b>{product.name}</b>\n\n{product.description}\n\n<b>–¶–µ–Ω–∞:</b> {product.price} —Ä—É–±."
        await message.answer_photo(
            photo=product.image,
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )


@user_router.callback_query(F.data.startswith("add_to_cart_"))
async def handle_add_to_cart(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É".
    """
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    product_id = int(callback.data.split("_")[-1])
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback
    user_telegram_id = callback.from_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    success = await add_to_cart(session, user_telegram_id, product_id)
    
    if success:
        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@user_router.message(Command("cart"))
async def show_cart(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    cart_items = await get_user_cart(session, message.from_user.id)
    
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_price = 0
    
    for item in cart_items:
        # item.product - —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Product –±–ª–∞–≥–æ–¥–∞—Ä—è relationship
        product = item.product

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"remove_from_cart_{product.id}")]
            ]
        )



        item_total = product.price * item.quantity
        total_price += item_total
        
        text = f"<b>{product.name}</b>\n\n<b>–¶–µ–Ω–∞:</b> {product.price} —Ä—É–±.\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {item.quantity} —à—Ç. \n\n<b>–ò—Ç–æ–≥–æ:</b> {item_total} —Ä—É–±."
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    
    await message.answer(f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.</b>", parse_mode="HTML") 

@user_router.callback_query(F.data.startswith("remove_from_cart_"))
async def handle_remove_from_cart(callback: CallbackQuery, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã".
    """
    product_id = int(callback.data.split("_")[-1])
    user_telegram_id = callback.from_user.id
    
    success = await remove_from_cart(session, user_telegram_id, product_id)
    product = await get_product(session, product_id)

    if success:
        await callback.answer(f"–¢–æ–≤–∞—Ä {product.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
